<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="最近在折腾IdentityServer4，为了简单，直接使用了官方给的QuickStart示例项目作为基础进行搭建。有一说一，为了保护一个API，感觉花费的时间比写一个API还要多。 本文基于ASP." />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>IdentityServer4 QuckStart 授权与自定义Claims - 波多尔斯基 - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=-oFz8B4m7JhHaZzdTkzPza2oLZNDRR8obnCz6w7OHbU" />
    <link id="MainCss" rel="stylesheet" href="/skins/custom/bundle-custom.min.css?v=1ssrnY3Il79Ok472qeVrpxlSprSXcHhYPgZC5S3wtVM" />
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/podolski/custom.css?v=ailkZnJy5SEtevoTepStsXvnAYc=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/custom/bundle-custom-mobile.min.css?v=-Yh290MhQyDeXLmvKTSses9H6-49lqbpXFh55zvS0w8" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/podolski/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/podolski/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/podolski/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=uk-as-QYRHtjaAbeEigAktvhwf01NRrnle-6exg65Ak"></script>
    <script>
        var currentBlogId = 180064;
        var currentBlogApp = 'podolski';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'Custom';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/podolski/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/podolski/">波多尔斯基</a>
</h1>
<h2>

</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/podolski/">
首页</a>
</li>
<li>


</li>
<li>
</li>
<li>
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/podolski/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
26&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
177</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/podolski/p/12734603.html">IdentityServer4 QuckStart 授权与自定义Claims</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
    <p>最近在折腾IdentityServer4，为了简单，直接使用了官方给的QuickStart示例项目作为基础进行搭建。有一说一，为了保护一个API，感觉花费的时间比写一个API还要多。</p>
<blockquote>
<p>本文基于ASP.NET CORE 3.1, IdentityServer4 3.1.3。代码皆为关键代码，贴全了太多了。</p>
</blockquote>
<p>好不容易跑起来了，最终的任务要落实到授权的工作上来。在API中使用<code>Authorize</code>用来限制用户的访问。</p>
<pre><code class="language-c#">[Route(&quot;api/[controller]&quot;)]
[Authorize(Roles = &quot;Administrator&quot;)]
[ApiController]
public class UserInfoController : ControllerBase
{
    /// &lt;summary&gt;
    /// 无参GET请求
    /// &lt;/summary&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    [HttpGet()]
    [ProducesResponseType(typeof(ReturnData&lt;IEnumerable&lt;UserInfo&gt;&gt;), Status200OK)]
    public async Task&lt;ActionResult&gt; Get()
    {
        var info = new Info&lt;UserInfo&gt;();
        return Ok(new ReturnData&lt;IEnumerable&lt;UserInfo&gt;&gt;(await info.Get()));
    }
</code></pre>
<p>然而在使用的时候，虽然正确取得授权，但是却无法正常访问API，一直提示401没有授权错误。仔细检查，发现IdentityServer4返回的内容并没有返回role的<code>JwtClaimTypes</code>，没有它，<code>Authorize</code>无法正常工作。</p>
<pre><code class="language-json">{
    &quot;nbf&quot;: 1587301921,
    &quot;exp&quot;: 1587305521,
    &quot;iss&quot;: &quot;http://localhost:5000&quot;,
    &quot;aud&quot;: &quot;MonitoringSystemApi&quot;,
    &quot;client_id&quot;: &quot;webClient&quot;,
    &quot;sub&quot;: &quot;c6c18d4d-c28e-4de5-86dd-779121216204&quot;,
    &quot;auth_time&quot;: 1587301921,
    &quot;idp&quot;: &quot;local&quot;,
    &quot;scope&quot;: [
        &quot;roles&quot;,
        &quot;MonitoringSystemApi&quot;,
        &quot;offline_access&quot;
    ],
    &quot;amr&quot;: [
        &quot;pwd&quot;
    ]
}
</code></pre>
<h1 id="实现">实现</h1>
<p>查看Config.cs，IdentityServer4默认只返回两种IdentityResource：openid和profile。按照官方的说法，这个东西定义的内容会返回到用户的token。<a href="https://identityserver4.readthedocs.io/en/latest/topics/resources.html">参考</a>。那么就果断给它安排。</p>
<pre><code class="language-c#">public static IEnumerable&lt;IdentityResource&gt; Ids =&gt;
new List&lt;IdentityResource&gt;
{
    new IdentityResources.OpenId(),
    new IdentityResources.Profile(),
    new IdentityResource (&quot;roles&quot;, new List&lt;string&gt; { JwtClaimTypes.Role }){ Required = true}
};

public static IEnumerable&lt;Client&gt; Clients =&gt;
    new List&lt;Client&gt;
    {
        new Client
        {
            ClientId = &quot;webClient&quot;,
            ClientSecrets = { new Secret(&quot;secret&quot;.Sha256()) },
            AllowOfflineAccess = true,
            AllowedGrantTypes = GrantTypes.ResourceOwnerPassword,
            // scopes that client has access to
            AllowedScopes = {
                &quot;roles&quot;,

                &quot;MonitoringSystemApi&quot; }
        },
</code></pre>
<p>执行之前，需要确保数据库中的用户数据，已经包含role的Claim。</p>
<pre><code class="language-c#">//添加用户代码
bob = new ApplicationUser
{
    UserName = &quot;bob&quot;
};
var result = userMgr.CreateAsync(bob, &quot;Pass123$&quot;).Result;
if (!result.Succeeded)
{
    throw new Exception(result.Errors.First().Description);
}
result = userMgr.AddClaimsAsync(bob, new Claim[]{
new Claim(JwtClaimTypes.Role, &quot;Administrator&quot;),
new Claim(JwtClaimTypes.Name, &quot;Bob Smith&quot;),
</code></pre>
<p>运行程序，返回值依旧没有任何变化，很挫败，只能继续折腾。<br>
有<a href="https://www.cnblogs.com/jianjialin/p/9310785.html">研究</a>通过实现<code>IProfileService</code>达到自定义Cliams。文章写的很详细，我这就不重复了，我实际试验过，可以成功。</p>
<p>但是文章末尾的注意，很重要。</p>
<blockquote>
<p>“那么, 通过profileservice颁发的claims, 任意clients都能拿到”</p>
</blockquote>
<p>说明这个优先级是非常高的，可以覆盖所有的行为，当然我们可以在<code>IProfileService</code>的实现上对权限进行进一步的设置，不过还是挺麻烦的。<a href="https://blog.csdn.net/xiaomifengmaidi1/article/details/104200679">参考实现</a>，<a href="https://identityserver4.readthedocs.io/en/latest/reference/profileservice.html">参考官方</a></p>
<p>作为懒人，必然不想再费劲去折腾权限的问题，那么是否有简单点的办法呢？</p>
<p>网上有一些<a href="https://stackoverflow.com/questions/40844310/role-based-authorization-with-identityserver4">问答</a>说到了可以通过设置Scopes来达到目的。不过过于久远，IdentityServer4已经没有这个独立的类了，说是已经被<code>ApiResource</code>取代了。</p>
<p>直觉上这个东西应该是指示要保护的API的相关内容的，好像和这个没啥关系，不过也只能死马当活马医了。修改config.cs，最终如下内容：</p>
<pre><code class="language-c#">public static IEnumerable&lt;ApiResource&gt; Apis =&gt;
new List&lt;ApiResource&gt;
{
    new ApiResource(&quot;pls&quot;, new[]{ &quot;role&quot;}),
};

public static IEnumerable&lt;Client&gt; Clients =&gt;
new List&lt;Client&gt;
{
new Client
{
    ClientId = &quot;webClient&quot;,
    ClientSecrets = { new Secret(&quot;secret&quot;.Sha256()) },
    AllowOfflineAccess = true,
    AllowedGrantTypes = GrantTypes.ResourceOwnerPassword,
    // scopes that client has access to
    AllowedScopes = {
        &quot;pls&quot;
        }
},
</code></pre>
<p>返回结果如下：</p>
<pre><code class="language-json">{
    &quot;nbf&quot;: 1587301799,
    &quot;exp&quot;: 1587305399,
    &quot;iss&quot;: &quot;http://localhost:5000&quot;,
    &quot;aud&quot;: &quot;pls&quot;,
    &quot;client_id&quot;: &quot;webClient&quot;,
    &quot;sub&quot;: &quot;c6c18d4d-c28e-4de5-86dd-779121216204&quot;,
    &quot;auth_time&quot;: 1587301799,
    &quot;idp&quot;: &quot;local&quot;,
    &quot;role&quot;: &quot;Administrator&quot;,
    &quot;scope&quot;: [
        &quot;pls&quot;,
        &quot;offline_access&quot;
    ],
    &quot;amr&quot;: [
        &quot;pwd&quot;
    ]
}
</code></pre>
<p>终于看见心心念念的自定义Claim（role），可以去访问API了。</p>
<blockquote>
<p>注意，在Client中也有个Claims，添加了role并且设置<code>AlwaysSendClientClaims</code>和<code>AlwaysIncludeUserClaimsInIdToken</code>之后，会在token中添加<code>client_roie</code>字段，这个是没办法用与授权的，可以理解为IdentityServer4直接指定了Client角色，并不是Identity中的角色概念。</p>
</blockquote>
<h1 id="后记">后记</h1>
<p>回过头来仔细看官方的<a href="https://identityserver4.readthedocs.io/en/latest/reference/api_resource.html">文档</a>，ApiResource中的UserClaims就是用来干这个的，折腾了半天，不如当时仔细看看文档了。</p>

</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2020-04-19 22:17</span>&nbsp;
<a href="https://www.cnblogs.com/podolski/">波多尔斯基</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12734603" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12734603);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 180064, cb_blogApp = 'podolski', cb_blogUserGuid = '02d591a4-dab1-e311-8d02-90b11c0b17d6';
    var cb_entryId = 12734603, cb_entryCreatedDate = '2020-04-19 22:17', cb_postType = 1; 
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 波多尔斯基
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>