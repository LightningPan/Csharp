<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="前言 CQRS ( Command Query Responsibility Segregation )命令查询职责分离模式，它主要从我们业务系统中进行分离出我们(Command 增、删、改)和（Qu" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>.NET Core 使用MediatR CQRS模式 - HueiFeng - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=Z9Vw4btcgJmrpUEjY_SgebmTmDXJ_hPFoST7ad2aJp4" />
    <link id="MainCss" rel="stylesheet" href="/skins/lessismoreright/bundle-lessismoreright.min.css?v=aar1eIg4zz9tL2uCrzOGDur190sJi2DazF273FikoL4" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/lessismoreright/bundle-lessismoreright-mobile.min.css?v=FJjyQba01xzuYKRyPpSwE1bMq69pRjxrz5wp2oZZGLY" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/yyfh/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/yyfh/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/yyfh/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=98Fvfd6UZH20B_MF08daNaODjSu879MVR9RHmyvWAlg"></script>
    <script>
        var currentBlogId = 329108;
        var currentBlogApp = 'yyfh';
        var cb_enable_mathjax = true;
        var isLogined = false;
        var skinName = 'LessIsMoreRight';
    </script>
    <script type="text/x-mathjax-config">
        MathJax.Hub.Config({
        tex2jax: { inlineMath: [['$','$'], ['\\(','\\)']], processClass: 'math', processEscapes: true },
        TeX: {
        equationNumbers: { autoNumber: ['AMS'], useLabelIds: true },
        extensions: ['extpfeil.js', 'mediawiki-texvc.js'],
        Macros: {bm: "\\boldsymbol"}
        },
        'HTML-CSS': { linebreaks: { automatic: true } },
        SVG: { linebreaks: { automatic: true } }
        });
    </script>
    <script src="https://mathjax.cnblogs.com/2_7_5/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
    
</head>
<body>
    <a name="top"></a>
    
    <div id="home">
    <div id="header">
        <div id="blogTitle">
            
<div class="title"><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/yyfh/">冯辉</a>
</div>
<div class="subtitle">

</div>

        </div>
        <div id="navigator">
            
<ul id="navList">
    <li id="nav_sitehome"><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
    <li id="nav_myhome">
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/yyfh/">
首页</a>
</li>
    <li id="nav_newpost">

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
    <li id="nav_contact">
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/HueiFeng">
联系</a></li>
    <li id="nav_rss">
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/yyfh/rss/">
订阅</a></li>
    <li id="nav_admin">
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>

            <div class="blogStats">
                
<span id="stats_post_count">随笔 - 
62&nbsp;</span>
<span id="stats_article_count">文章 - 
0&nbsp;</span>
<!-- <span id="stats-comment_count"></span> -->
<span id="stats_comment_count">评论 - 
281</span>
            </div>
        </div>
    </div>
    <div id="main">
        <div id="mainContent">
            <div class="forFlow">
                <div id="post_detail">
    <div id="topics">
        <div class="post">
            <h1 class="postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/yyfh/p/12797600.html">.NET Core 使用MediatR CQRS模式</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
    <h1 id="前言">前言</h1>
<p><strong>CQRS</strong>(<strong>Command Query Responsibility Segregation</strong>)命令查询职责分离模式，它主要从我们业务系统中进行分离出我们(Command 增、删、改)和（Query 查）,<br>
同时他可以明确的区分我们每一个动作向我们的请求模型和响应模型.从而降低了我们系统的复杂性.</p>
<p>CQRS模式通过使用不同的接口来分离读取数据和更新数据的操作。CQRS模式可以最大化性能，扩展性以及安全性， 还会为系统的持续演化提供更多的弹性，防止Update命令在域模型Level发生冲突。<br>
通常情况我们使用同一数据模型进行我们数据的查询和修改,这是一个非常简单的CURD，在一些复杂的应用程序中，这种方法会变的难以操作，例如在读取方面应用程序可能会存在大量的查询，<br>
返回具有不同的数据传输对象（DTO）,对象映射可能会变的非常复杂，在写入方面，模型可能实施复杂的验证和业务逻辑.结果导致模型太多操作，整体变的相当得复杂.</p>
<p>如下图所示:</p>
<p><img src="https://imgkr.cn-bj.ufileos.com/af3e85fb-21cb-4de7-884f-027c613e2ac9.png" alt=""></p>
<p><strong>MediatR</strong>他为我们解决将消息发送与消息处理进行了解耦，他同时支持异步和同步来发送和监听消息.</p>
<h1 id="mediatr">MediatR</h1>
<p>Install MediatR</p>
<pre><code>PM&gt; Install-Package MediatR
</code></pre>
<ul>
<li>IMeditator</li>
<li>IRequese、IRequest</li>
<li>IRequestHandler&lt;in TRequest, TResponse&gt;</li>
</ul>
<pre><code class="language-csharp">    public class CreateOrderRequestModel: 
        IRequest&lt;string&gt;
    {
        public string UserId { get; set; }
        public string CardNumber { get; set; }
    }
</code></pre>
<pre><code class="language-csharp">    public class GetOrderByIdRequestModel:IRequest&lt;string&gt;
    {
        public string OrderId { get; set; }
    }
</code></pre>
<pre><code class="language-csharp"> //返回值
 public interface IRequest&lt;out TResponse&gt; : IBaseRequest{}
 //无返回值
 public interface IRequest : IRequest&lt;Unit&gt;, IBaseRequest{}
</code></pre>
<p>创建处理程序,所有的处理程序都通过<strong>IRequestHandler</strong>接口来实现，该接口有两个参数，第一个是请求内容，第二个是响应内容.</p>
<pre><code class="language-csharp">    public class CreateOrderCommandHandler
        : IRequestHandler&lt;CreateOrderRequestModel, string&gt;
    {
        public Task&lt;string&gt; Handle(CreateOrderRequestModel request, CancellationToken cancellationToken)
        {
            //do something...
            return Task.FromResult(request.UserId);
        }
    }

</code></pre>
<p>正如下代码片段，处理程序实现了IRequestHandler带有输入和输出类型定义的接口</p>
<pre><code class="language-csharp">public interface IRequestHandler&lt;in TRequest, TResponse&gt; where TRequest : IRequest&lt;TResponse&gt;
  {
    Task&lt;TResponse&gt; Handle(TRequest request, CancellationToken cancellationToken);
  }
</code></pre>
<pre><code class="language-csharp">    public class GetOrderByIdQueryHandler :
        IRequestHandler&lt;GetOrderByIdRequestModel, string&gt;
    {
        public Task&lt;string&gt; Handle(GetOrderByIdRequestModel request, CancellationToken cancellationToken)
        {
            //do something
            return Task.FromResult(request.OrderId);
        }
    }
</code></pre>
<p>Install MediatR.Extensions.Microsoft.DependencyInjection</p>
<pre><code>PM&gt; MediatR.Extensions.Microsoft.DependencyInjection
</code></pre>
<p>在Startup.cs中注册MediatR</p>
<pre><code class="language-csharp">services.AddMediatR(Assembly.GetExecutingAssembly());
</code></pre>
<p>我们只需要注入IMediator接口,通过如下代码我们来使用他们</p>
<pre><code class="language-csharp">    [Route(&quot;api/[controller]&quot;)]
    [ApiController]
    public class OrderController : ControllerBase
    {
        private readonly IMediator _mediator;
        public OrderController(IMediator mediator)
        {
            _mediator = mediator;
        }

        [HttpPost]
        public async Task&lt;IActionResult&gt; Post([FromBody]CreateOrderRequestModel requestModel)
        {
            var response =await _mediator.Send(requestModel);
            return Ok(response);
        }

        [HttpGet]
        public async Task&lt;IActionResult&gt; Get([FromQuery]GetOrderByIdRequestModel requestModel)
        {
            var response = await _mediator.Send(requestModel);
            return Ok(response);
        }
    }
</code></pre>
<p>CQRS 主要包含两大概念，一个是读写分离，一个是事件源。事件源不是必须项</p>
<h1 id="reference">Reference</h1>
<p><a href="https://github.com/hueifeng/BlogSample/tree/master/src/CQRSMediatR">https://github.com/hueifeng/BlogSample/tree/master/src/CQRSMediatR</a></p>

</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2020-04-28 22:02</span>&nbsp;
<a href="https://www.cnblogs.com/yyfh/">HueiFeng</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12797600" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12797600);return false;">收藏</a></div>
        </div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 329108, cb_blogApp = 'yyfh', cb_blogUserGuid = 'f2702a43-bbde-e611-845c-ac853d9f53ac';
    var cb_entryId = 12797600, cb_entryCreatedDate = '2020-04-28 22:02', cb_postType = 1; 
    loadViewCount(cb_entryId);
    loadSideColumnAd();
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>    </div>
</div>
            </div>
        </div>

        <div id="sideBar">
            <div id="sideBarMain">
                
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

<div id="sidebar_ad"></div>
                <div id="calendar"><div id="blog-calendar" style="display:none"></div></div>                
                <script>loadBlogDefaultCalendar();</script>
                <div id="leftcontentcontainer">
                    <!-- begin:SingleColumn -->
                    <div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
                    <!-- end:  SingleColumn -->
                </div>
            </div>
        </div>
        <div class="clear"></div>
    </div>
    <div class="clear"></div>
    <div id="footer">
        <!--done-->
Copyright &copy; 2020 HueiFeng
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>

    </div>
</div>

    <div id="page_end_html">
        <script>
  $("#page_end_html,#ad_t2,#cnblogs_c1,#under_post_news,#under_post_kb,#cnblogs_c2").css('display','none')

</script>
<script type="text/javascript">var cnzz_protocol = (("https:" == document.location.protocol) ? "https://" : "http://");document.write(unescape("%3Cspan id='cnzz_stat_icon_1278154726'%3E%3C/span%3E%3Cscript src='" + cnzz_protocol + "s4.cnzz.com/z_stat.php%3Fid%3D1278154726' type='text/javascript'%3E%3C/script%3E"));</script>
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-155252267-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-155252267-2');
</script>
    </div>
</body>
</html>