<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="我一直认为Code Review（代码审查）是软件开发中的最佳实践之一，可以有效提高整体代码质量，及时发现代码中可能存在的问题。包括像Google、微软这些公司，Code Review都是基本要求，代" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>Code Review最佳实践 - 宝玉 - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=Z9Vw4btcgJmrpUEjY_SgebmTmDXJ_hPFoST7ad2aJp4" />
    <link id="MainCss" rel="stylesheet" href="/skins/arrow/bundle-arrow.min.css?v=L-STHnRipM9Vp-O5CxV_IvvLLLSaib7U0fJDhFfRZZ8" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/arrow/bundle-arrow-mobile.min.css?v=g8joWIb9zf0v6qSSYjzuwnPNxYNYutz3bgwMjs-jMEg" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/dotey/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/dotey/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/dotey/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=98Fvfd6UZH20B_MF08daNaODjSu879MVR9RHmyvWAlg"></script>
    <script>
        var currentBlogId = 926;
        var currentBlogApp = 'dotey';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'arrow';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    <!--done-->
<div id="header">
	
<!--done-->
<div class="header">
	<div class="headerText">
		<a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/dotey/">宝玉</a>
<br>
		
宝玉的blog

	</div>
</div>


</div>
<div id="mylinks">
<!--done-->
<a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
&nbsp;&nbsp;&nbsp;

<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/dotey/">
首页</a>
&nbsp;&nbsp;&nbsp;


<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
&nbsp;&nbsp;&nbsp;

<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E5%AE%9D%E7%8E%89">
联系</a>&nbsp;&nbsp;&nbsp;

<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/dotey/rss/">
订阅</a>
<a id="blog_nav_rss_image" href="https://www.cnblogs.com/dotey/rss/">
    <img src="/skins/arrow/images/xml.gif" alt="订阅" />
</a>&nbsp;&nbsp;&nbsp;

<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>


</div>
<div id="mytopmenu">
	
		<div class="blogStats">随笔 - 
60&nbsp;
文章 - 
1&nbsp;评论 - 
713&nbsp;trackbacks - 
4
</div>


	
</div>
<div id="leftcontent">
	
		<DIV id="leftcontentcontainer">
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script><br>
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

<div id="sidebar_ad"></div>
			<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script></DIV>		
	
</div>
<div id="centercontent">
	<!--done-->
<div id="post_detail">
    <div class="post">
        <div class="postTitle">
            <h1>
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/dotey/p/11216430.html">Code Review最佳实践</a>
</h1>
        </div>
        
<div id="cnblogs_post_body" class="blogpost-body ">
    <p align="justify">我一直认为Code Review（代码审查）是软件开发中的最佳实践之一，可以有效提高整体代码质量，及时发现代码中可能存在的问题。包括像Google、微软这些公司，Code Review都是基本要求，代码合并之前必须要有人审查通过才行。</p>
<p align="justify">&nbsp;</p>
<p align="justify">然而对于我观察到的大部分软件开发团队来说，认真做Code Review的很少，有的流于形式，有的可能根本就没有Code Review的环节，代码质量只依赖于事后的测试。也有些团队想做好代码审查，但不知道怎么做比较好。</p>
<p align="justify">&nbsp;网上关于如何做Code Review的文章已经有很多了，这里我结合自己的一些经验，也总结整理了一下Code Review的最佳实践，希望能对大家做好Code Review有所帮助。</p>
<h1>Code Review有什么好处？</h1>
<p align="justify">很多团队或个人不做Code Review，根源还是不觉得这是一件有意义的事情，不觉得有什么好处。这个问题要从几个角度来看。</p>
<ul>
<li><strong>首先是团队知识共享的角度</strong><strong>&nbsp;</strong></li>
</ul>
<p align="justify">一个开发团队中，水平有高有低，每个人侧重的领域也有不同。怎么让高水平的帮助新人成长？怎么让大家都对自己侧重领域之外的知识保持了解？怎么能有人离职后其他人能快速接手？这些都是团队管理者关心的问题。</p>
<p align="justify">而代码审查，就是一个很好的知识共享的方式。通过代码审查，高手可以直接指出新手代码中的问题，新手可以马上从高手的反馈中学习到好的实践，得到更快的成长；通过代码审查，前端也可以去学习后端的代码，做功能模块A的可以去了解功能模块B的。</p>
<p align="justify">可能有些高手觉得给新手代码审查浪费时间，自己也没收获。其实不然，新人成长了，就可以更多的帮高手分担繁重的任务；代码审查中花时间，就少一些帮新人填坑擦屁股的时间；良好的沟通能力、发现问题的能力、帮助其他人成长，都是技术转管理或技术上更上一层楼必不可少的能力，而通过代码审查可以有效的去练习这些方面的能力。</p>
<ul>
<li><strong>然后是代码质量的角度</strong></li>
</ul>
<p align="justify">现实中的项目总是人手缺进度紧，所以被压缩的往往就是自动化测试和代码审查，结果影响代码质量，欠下技术债务，最后还是要加倍偿还。</p>
<p align="justify">也有人寄希望于开发后的人工测试，然而对于代码质量来说，很多问题通过测试是测试不出来的，只能通过代码审查。比如说代码的可读性可维护性，比如代码的结构，比如一些特定条件才触发的死循环、逻辑算法错误，还有一些安全上的漏洞也更容易通过代码审查发现和预防。&nbsp;</p>
<p align="justify">也有人觉得自己水平高就不需要代码审查了。对于高手来说，让别人审查自己的代码，可以让其他人学习到好的实践；在让其他人审查的同时，在给别人说明自己代码的时候，也等于自己对自己的代码进行了一次审查。这其实就跟我们上学时做数学题一样，真正能拿高分的往往是那些做完后还会认真检查的。</p>
<ul>
<li><strong>还有团队规范的角度</strong>&nbsp;</li>
</ul>
<p align="justify">每个团队都有自己的代码规范，有自己的基于架构设计的开发规范，然而时间一长，就会发现代码中出现很多不遵守代码规范的情况，有很多绕过架构设计的代码。比如难以理解和不规范的命名，比如三层架构里面UI层绕过业务逻辑层直接调用数据访问层代码。&nbsp;</p>
<p align="justify">如果这些违反规范的代码被纠正的晚了，后面再要修改就成本很高了，而且团队的规范也会慢慢的形同虚设。</p>
<p align="justify">通过代码审查，就可以及时的去发现和纠正这些问题，保证团队规范的执行。</p>
<p align="justify">关于代码审查的好处，还有很多，也不一一列举。还是希望能认识到<strong>Code Review和写自动化测试一样，都是属于磨刀不误砍柴工的工作，在上面投入一点点时间，未来会收获代码质量，会节约整体的开发时间。</strong></p>
<h1>该怎么做？&nbsp;</h1>
<p align="justify">现在很多人都已经有意识到Code Review的重要性了，只是苦于不知道如何去实践，不知道怎么样算是好的Code Review实践。</p>
<h2>把Code Review作为开发流程的必选项而不是可选项</h2>
<p align="justify">在很早以前，我就尝试过将代码审查作为代码流程的一部分，但只是一个可选项，没有Code Review也可以把代码合并到master。这样的结果就是想起来才会去做Code Review，去检查的时候已经有了太多的代码变更，审查起来非常困难，另外就算审查出问题，也很难得以修改。&nbsp;</p>
<p align="justify">我们现在对代码的审查则是作为开发流程的一个必选项，每次开发新功能或者修复Bug，开一个新的分支，分支要合并到master有两个必要条件：</p>
<ul>
<li>所有的自动化测试通过</li>
<li>有至少一个人Code Review通过，如果是新手的PR，还必须有资深程序员Code Review通过</li>
</ul>
<p><img src="https://img2018.cnblogs.com/blog/564/201907/564-20190720013237180-1803130612.png" alt="" /></p>
<p>图片来源：How to Do Code Reviews Like a Human</p>
<p align="justify">这样把Code Review作为开发流程的一个必选项后，就很好的保证了代码在合并之前有过Code Review。而且这样合并前要求代码审查的流程，好处也很明显：</p>
<ul>
<li>由于每一次合并前都要做代码审查，这样一般一次审查的代码量也不会太大，对于审查者来说压力也不会太大</li>
<li>如果在Code Review时发现问题，被审查者希望代码能尽快合并，也会积极的对审查出来的问题进行修改，不至于对审查结果太过抵触</li>
</ul>
<p align="justify">如果你觉得Code Review难以推行，不妨先尝试着把Code Review变成你开发流程的一个必选项。</p>
<h2>把Code Review变成一种开发文化而不仅仅是一种制度</h2>
<p align="justify">把Code Review 作为开发流程的必选项后，不代表Code Review这件事就可以执行的很好，因为Code Review 的执行，很大部分程度上依赖于审查者的认真审查，以及被审查者的积极配合，两者缺一不可！</p>
<p align="justify">如果仅仅只是当作一个流程制度，那么就可能会流于形式。最终结果就是看起来有Code Review，但没有人认真审查，随便看下就通过了，或者发现问题也不愿意修改。</p>
<p align="justify">真要把Code Review这件事做好，必须让Code Review变成团队的一种文化，开发人员从心底接受这件事，并认真执行这件事。</p>
<p align="justify">要形成这样的文化，不那么容易，也没有想象的那么难，比如这些方面可以参考：</p>
<ul>
<li>首先，得让开发人员认识到Code Review这件事为自己、为团队带来的好处</li>
<li>然后，得要有几个人做好表率作用，榜样的力量很重要</li>
<li>还有，对于管理者来说，你激励什么，往往就会得到什么</li>
<li>最后，像写自动化测试一样，<strong>把Code Review要作为开发任务的一部分，给审查者和被审查者都留出专门的时间去做这件事</strong>，不能光想着马儿跑得快又舍不得给马儿吃草&nbsp;</li>
</ul>
<p align="justify">如何形成这样的文化，有心的话，还有很多方法可以尝试。只有真正让大家都认同和践行，才可能去做好Code Review这件事。</p>
<h2>一些Code Review的经验技巧</h2>
<p align="justify">在做好Code Review这件事上，还有一些经验技巧可以参考。</p>
<h2>选什么工具辅助做CODE REVIEW？</h2>
<p align="justify">现在很多源代码管理工具都自带Code Review工具，典型的像Github、Gitlab、微软的Azure DevOps，尤其是像Gitlab，还可以自己在本地搭建环境，根据自己的需要灵活配置。&nbsp;</p>
<h2>配合什么样的开发流程比较好？</h2>
<p align="justify">像<a href="https://guides.github.com/introduction/flow/">Github Flow</a>这样基于分支开发的流程是特别适合搭配Code Review的。其实不管什么样的开发流程，关键点在于代码合并到master（主干）之前，要先做Code Review。</p>
<h2>真遇到紧急情况，来不及代码审查怎么办？&nbsp;</h2>
<p align="justify">虽然原则上，必须要Code Review才能合并，但有时候确实会存在一些紧急情况，比如说线上故障补丁，而又没有其他人在线，那么这种情况下，最好是在任务管理系统中，创建一个Ticket，用来后续跟踪，确保后续补上Code Review，并对Code Review结果有后续的代码更新。</p>
<h2>先设计再编码</h2>
<p align="justify">有些新人发现自己的代码提交PR（Pull Request）后，会收到一堆的Code Review意见，必须要做大量的改动。这多半是因为在开始做之前，没有做好设计，做出来后才发现问题很多。&nbsp;</p>
<p align="justify">建议在做一个新功能之前，写一个简单的设计文档，表达清楚自己的设计思路，找资深的先帮你做一下设计的审查，发现设计上的问题。设计上没问题了，再着手开发，那么到Review的时候，相对问题就会少很多。</p>
<h2>代码在提交CODE REVIEW之前，作者要自己先REVIEW和测试一遍&nbsp;</h2>
<p align="justify">我在做代码审查的时候，有时候会发现一些非常明显的问题，有些甚至自己都没有测试过，就等着别人Code Review和测试帮助发现问题。这种依赖心理无论是对自己还是对团队都是很不负责任的。&nbsp;</p>
<p align="justify"><strong>一个好的开发人员，代码在提交Code Review之前，肯定是要自己先Review一遍，把该写的自动化测试代码写上，自己把基本的测试用例跑一遍的。</strong>&nbsp;</p>
<p align="justify">我对于团队提交的PR，有个要求就是要在PR的描述中增加截图或者录屏，就是为了通过截图或者录屏，确保提交PR的人自己是先测试过的。这也是一个有效的辅助手段。</p>
<h2>PR要小&nbsp;</h2>
<p align="justify">在做Code Review的时候，如果有大量的文件修改，那么Review起来是很困难的，但如果PR比较小，相对就比较容易Review，也容易发现代码中可能存在的问题。</p>
<p align="justify">所以在提交PR时，PR要小，如果是比较大的改动，那么最好分批提交，以减轻审查者的压力。</p>
<p><img src="https://img2018.cnblogs.com/blog/564/201907/564-20190720013159632-1726452152.jpg" alt="" /></p>
<h2>对评论进行分级</h2>
<p align="justify">在做Code Review时，需要针对审查出有问题的代码行添加评论，如果只是评论，有时候对于被审查者比较难甄别评论所代表的含义，是不是必须要修改。</p>
<p align="justify">建议可以对Review的评论进行分级，不同级别的结果可以打上不同的Tag，比如说：</p>
<ul>
<li>[blocker]: 在评论前面加上一个[blocker]标记，表示这个代码行的问题必须要修改</li>
<li>[optional]：在评论前面加上一个[optional]标记，表示这个代码行的问题可改可不改</li>
<li>[question]：在评论前面加上一个[question]标记，表示对这个代码行不理解，有问题需要问，被审查者需要针对问题进行回复澄清&nbsp;</li>
</ul>
<p align="justify">类似这样的分级可以帮助被审查者直观了解Review结果，提高Review效率。</p>
<h2>评论要友好，避免负面词汇；有说不清楚的问题当面沟通&nbsp;</h2>
<p align="justify">虽然评论是主要的Code Review沟通方式，但也不要过于依赖，有时候面对面的沟通效率更高，也容易消除误解。</p>
<p align="justify">另外文明用语，不要用一些负面的词汇。&nbsp;</p>
<h1>总结&nbsp;</h1>
<p align="justify">Code Review是一种非常好的开发实践，如果你还没开始，不妨逐步实践起来；如果已经做了效果不好，不妨对照一下，看有没有把Code Review作为开发流程的必选项而不是可选项？有没有把Code Review变成一种开发文化而不仅仅是一种制度？</p>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
        <div class="postDesc">posted on 
<span id="post-date">2019-07-20 01:35</span>&nbsp;
<a href="https://www.cnblogs.com/dotey/">宝玉</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=11216430" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(11216430);return false;">收藏</a></div>
    </div>
</div>

<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 926, cb_blogApp = 'dotey', cb_blogUserGuid = '367f310b-63cf-dd11-9e4d-001cf0cd104b';
    var cb_entryId = 11216430, cb_entryCreatedDate = '2019-07-20 01:35', cb_postType = 1; 
    loadViewCount(cb_entryId);
    loadSideColumnAd();
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>

	<!--done-->
<div class="footer">
	Copyright &copy; 2020 宝玉
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>
 Powered by: <a href="http://www.cnblogs.com" class="footerlink">博客园</a><br>
</div>


</div>




    
</body>
</html>