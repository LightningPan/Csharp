<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="一、感想 在写这一系列文章之前，本来以为写这个之前已经搭建好的框架描述会比较简单，但是慢慢写下来才发现。写这个真的不简单额，本来以为图文一起，一个晚上应该能输出一篇吧。。。结果：现实真的骨感，一个星期" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>[Abp vNext 入坑分享] - 4.JWT授权的接入 - 二B方案程序员 - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=Z9Vw4btcgJmrpUEjY_SgebmTmDXJ_hPFoST7ad2aJp4" />
    <link id="MainCss" rel="stylesheet" href="/skins/anothereon001/bundle-anothereon001.min.css?v=vmUk-3Bh8LDsKXwjNHs2GDiFna-ZMTUgOJzjUaXTlPA" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/anothereon001/bundle-anothereon001-mobile.min.css?v=cJiDsI1JAuHHd-OAUWJeyE5JMXXsG4mmuUi2rVmEK1c" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/twoBcoder/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/twoBcoder/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/twoBcoder/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=98Fvfd6UZH20B_MF08daNaODjSu879MVR9RHmyvWAlg"></script>
    <script>
        var currentBlogId = 312139;
        var currentBlogApp = 'twoBcoder';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'AnotherEon001';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    <div id="wrapper">
<div id="header">

<div id="top">
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/twoBcoder/">二B方案程序员</a>
</h1>
<div id="subtitle">

</div>
</div>
<div id="sub"><div class="BlogStats">随笔 - 
6, 文章 - 
1, 评论 - 
5, 引用 - 
0</div>

</div>




</div>
<div id="main_container">
<div id="main_content">
<div id="content">
	<div id="post_detail">
    <div class="post">
        <h2>
            
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/twoBcoder/p/12797427.html">[Abp vNext 入坑分享] - 4.JWT授权的接入</a>

        </h2>
        <div class="postbody">
            
<div id="cnblogs_post_body" class="blogpost-body ">
    <p><span style="font-size: 18px;"><strong>一、感想</strong></span></p>
<p><span style="font-size: 18px;">在写这一系列文章之前，本来以为写这个之前已经搭建好的框架描述会比较简单，但是慢慢写下来才发现。写这个真的不简单额，本来以为图文一起，一个晚上应该能输出一篇吧。。。结果：现实真的骨感，一个星期能输出两篇都不错了。。</span></p>
<p><span style="font-size: 18px;">1.之前没有写过整体系列类的文章，从高考之后就基本上没有写长篇的文章了。</span></p>
<p><span style="font-size: 18px;">2.本系列文章主要定位面向是初中级的开发可以根据步骤来搭建，高级与架构主要是相互讨论一下借鉴，所以很多东西写得很简单，基本上相当于是手把手教搭建的了</span></p>
<p><span style="font-size: 18px;">3.虽然自己之前的搭建已经完成了，但是从新来的时候好像有一些之前没有考虑到的东西又要重新考虑一下加深了理解，从第4篇开始已经慢慢到了应用的层面，虽然基于abpvnext，但是并没有完全基于。要写这些的时候又要想着怎么写得比较清晰，或者又怕自己理解不够搞错了。</span></p>
<p><span style="font-size: 18px;">4.现在大多数分享都是写demo类，像这种直接拿整个解决方案的很少，同时架构这种又是不同的team有不同的解决方案。我只能写我自己的用法，供参考吧。。</span></p>
<p><span style="font-size: 18px;">总知一句话：好难啊！！尽量坚持写完整个框架搭建吧！！</span></p>
<p><span style="font-size: 18px;">搞完之后看下要不要基于这个架构再开个持续集成的新坑：k8s,jenkins，docker之类的持续集成方面的。</span></p>
<p><span style="font-size: 18px;">唉！慢慢写吧。</span></p>
<p><span style="font-size: 18px;"><strong>二、简要说明</strong></span></p>
<p><span style="font-size: 18px;"><strong>源码：<a href="https://github.com/lcjyslqyy/AbpVnext.Learn">https://github.com/lcjyslqyy/AbpVnext.Learn</a></strong></span></p>
<p><a href="https://www.cnblogs.com/twoBcoder/p/12747440.html" target="_blank"><span style="font-size: 18px;"><strong>《章节目录》</strong></span></a></p>
<p><span style="font-size: 18px;">由于我们在前面已经说明了，弃用id4的授权方法，因此在这里需要使用原始的jwt来做授权校验。</span></p>
<p><span style="font-size: 18px;">本篇文章则是介绍JWT的接入，并根据自己的需要定义授权失败的返回，取代原来的401状态码。关于JWT的介绍，网上很多文章已经描述得非常清晰了，我这里就不做过多的赘述了，大概是：前两段是base64，谁都可以解码的，最后一段是签名用于和服务器的key和前两段组合一个New string的签名校验；想要详细了解的请跳转：<a href="https://www.jianshu.com/p/576dbf44b2ae">https://www.jianshu.com/p/576dbf44b2ae</a>。</span></p>
<p><span style="font-size: 18px;">&nbsp;</span></p>
<p><span style="font-size: 18px;"><strong>三、具体步骤</strong></span></p>
<p><span style="font-size: 18px;">2.1 nuget在Host项目安装：Microsoft.AspNetCore.Authentication.JwtBearer&nbsp;</span></p>
<p><span style="font-size: 18px;">&nbsp;<img style="display: block; margin-left: auto; margin-right: auto" src="https://img2020.cnblogs.com/blog/1010868/202004/1010868-20200428213402504-109074897.png" alt=""></span></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 18px;">在appsettings.json里面添加：</span></p>
<p><span style="font-size: 18px;">"JwtAuth": {</span></p>
<p><span style="font-size: 18px;">&nbsp;&nbsp;&nbsp; "Audience": "abpvnextlearn",</span></p>
<p><span style="font-size: 18px;">&nbsp;&nbsp;&nbsp; "Issuer": "abpvnextlearn",</span></p>
<p><span style="font-size: 18px;">&nbsp;&nbsp;&nbsp; "SecurityKey": "dzehzRz9a8+8TAGbqKHP9ITdRmZdOpJWQRsFb8oz50A=",//签名的key</span></p>
<p><span style="font-size: 18px;">&nbsp;&nbsp;&nbsp; "TokenTime": 48</span></p>
<p><span style="font-size: 18px;">&nbsp; }</span></p>
<p><span style="font-size: 18px;">然后在LearnHttpApiHostModule注入AddAuthentication的授权服务，使用jwt校验的方式：如下图</span></p>
<p><img style="display: block; margin-left: auto; margin-right: auto" src="https://img2020.cnblogs.com/blog/1010868/202004/1010868-20200428213411779-1915925385.png" alt=""></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 18px;">则已经添加Jwt授权成功。</span></p>
<p><span style="font-size: 18px;">2.2校验一下是否是可以正常授权了，</span></p>
<p><span style="font-size: 18px;">我们先增加一个LoginController,增加Logout的方法，增加Authorize属性，如下图在这里，注意一点：所有的方法都要添加方法属性：如HttpPost,HttpGet等,不然在Swagger中是会抛出异常的。</span></p>
<p><span style="font-size: 18px;">&nbsp;<img style="display: block; margin-left: auto; margin-right: auto" src="https://img2020.cnblogs.com/blog/1010868/202004/1010868-20200428213420831-944899898.png" alt=""></span></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 18px;">这里我们看到swagger中有了logout的接口了，我们请求一下，接口返回了401状态码，是未授权状态的描述。这里说明我们的jwt的校验是添加成功的了。</span></p>
<p><span style="font-size: 18px;">&nbsp;<img style="display: block; margin-left: auto; margin-right: auto" src="https://img2020.cnblogs.com/blog/1010868/202004/1010868-20200428213429280-1428841193.png" alt=""></span></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 18px;">2.3修改未授权的输出。我们定义授权失败返回{code="401",msg="无登录信息或登录信息已失效，请重新登录"},由于我们后期所有的接口都遵循返回标准，code表示返回码0为成功，msg为信息，data为数据。</span></p>
<p><span style="font-size: 18px;">因此授权失败也要统一此标准，以便前端可以进行统一判断。</span></p>
<p><span style="font-size: 18px;">需要在AddJwtBearer添加以下代码：</span></p>
<p><span style="font-size: 18px;">options.Events = new JwtBearerEvents</span></p>
<p><span style="font-size: 18px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>
<p><span style="font-size: 18px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OnChallenge = context =&gt;</span></p>
<p><span style="font-size: 18px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>
<p><span style="font-size: 18px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //此处代码为终止.Net Core默认的返回类型和数据结果，这个很重要哦，必须</span></p>
<p><span style="font-size: 18px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; context.HandleResponse();</span></p>
<p><span style="font-size: 18px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var payload = "{\"ret\":401,\"err\":\"无登录信息或登录信息已失效，请重新登录。\"}";</span></p>
<p><span style="font-size: 18px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //自定义返回的数据类型</span></p>
<p><span style="font-size: 18px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; context.Response.ContentType = "application/json";</span></p>
<p><span style="font-size: 18px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; context.Response.StatusCode = StatusCodes.Status200OK;</span></p>
<p><span style="font-size: 18px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context.Response.WriteAsync(payload);</span></p>
<p><span style="font-size: 18px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return Task.FromResult(0);</span></p>
<p><span style="font-size: 18px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>
<p><span style="font-size: 18px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };</span></p>
<p><span style="font-size: 18px;">再次请求如下图，表示我们替换成功了。</span></p>
<p><span style="font-size: 18px;">&nbsp;<img style="display: block; margin-left: auto; margin-right: auto" src="https://img2020.cnblogs.com/blog/1010868/202004/1010868-20200428213440128-511438256.png" alt=""></span></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 18px;">2.4接下来完善获取jwt的请求Login，获取jwt的流程，这里我如写一些简单的逻辑。如下图：</span></p>
<p><span style="font-size: 18px;"><img style="display: block; margin-left: auto; margin-right: auto" src="https://img2020.cnblogs.com/blog/1010868/202004/1010868-20200428213542920-303336186.png" alt=""></span></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 18px;">然后登录来获取token,如下图：</span></p>
<p><span style="font-size: 18px;"><img style="display: block; margin-left: auto; margin-right: auto" src="https://img2020.cnblogs.com/blog/1010868/202004/1010868-20200428213549647-761486690.png" alt=""></span></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 18px;">&nbsp;</span><span style="font-size: 18px;">然后使用postman来校验token是否合法：</span></p>
<p><span style="font-size: 18px;">&nbsp;<img style="display: block; margin-left: auto; margin-right: auto" src="https://img2020.cnblogs.com/blog/1010868/202004/1010868-20200428213505812-1725393883.png" alt=""></span></p>
<p><span style="font-size: 18px;">返回正常，说明授权校验已经通过了。</span></p>
<p><span style="font-size: 18px;"><strong>四、下一章介绍</strong></span></p>
<p><span style="font-size: 18px;"><strong>定义统一的返回，与全局异常处理替换掉</strong><strong>abpvnext</strong><strong>原来的全局异常</strong></span></p>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
        </div>
        <p class="postfoot">
            posted on 
<span id="post-date">2020-04-28 21:37</span>&nbsp;
<a href="https://www.cnblogs.com/twoBcoder/">二B方案程序员</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12797427" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12797427);return false;">收藏</a>
        </p>
    </div>
</div>

<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 312139, cb_blogApp = 'twoBcoder', cb_blogUserGuid = 'f211f42b-ed64-e611-9fc1-ac853d9f53cc';
    var cb_entryId = 12797427, cb_entryCreatedDate = '2020-04-28 21:37', cb_postType = 1; 
    loadViewCount(cb_entryId);
    loadSideColumnAd();
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>

</div>
</div>
<div id="leftmenu">


<h3>导航</h3>
<ul>
    <li>
        <a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>

    </li>
    <li>
        
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/twoBcoder/">
首页</a>

    </li>
    <li>
        

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>

    </li>
    <li>
        
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E4%BA%8CB%E6%96%B9%E6%A1%88%E7%A8%8B%E5%BA%8F%E5%91%98">
联系</a>
    </li>
    <li>
        
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/twoBcoder/rss/">
订阅</a>
        
<a id="blog_nav_rss_image" href="https://www.cnblogs.com/twoBcoder/rss/">
    <img src="/skins/anothereon001/images/xml.gif" alt="订阅" />
</a>
    </li>
    <li>
        
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>

    </li>
</ul>


<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>

<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

<div id="sidebar_ad"></div>
<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>

</div>
</div>
<div class="clear"></div>
<div id="footer">
<p id="footer">
	Powered by: 
	<br />
	
	
<a href="https://www.cnblogs.com/" id="Footer1_Hyperlink3" style="font-size: 12px; font-family: Verdana">博客园</a>
	<br />
	Copyright &copy; 2020 二B方案程序员
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>

</p>


</div>
</div>


    
</body>
</html>