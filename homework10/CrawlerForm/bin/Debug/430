<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="never" />
    <meta property="og:description" content="[TOC] 上一篇，我们学习了任务的基础，学会多种方式场景任务和执行，异步获取返回结果等。上一篇讲述的知识比较多，这一篇只要是代码实践和示例操作。 判断任务状态 | 属性 | 说明 | | | | |" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>C#多线程(14)：任务基础② - 痴者工良 - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=Z9Vw4btcgJmrpUEjY_SgebmTmDXJ_hPFoST7ad2aJp4" />
    <link id="MainCss" rel="stylesheet" href="/skins/codinglife/bundle-codinglife.min.css?v=hlpQ1CJDwwJXDxv2HNauUmW3NjyWzoMaw1uER19SLT0" />
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/whuanle/custom.css?v=mA&#x2B;FpFQUS/JIlY1IQJTjcdZUvw0=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/codinglife/bundle-codinglife-mobile.min.css?v=XjHfryC9ctsatIZz1dHn7TsRIqmwz9c3aj_6SCfHSDM" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/whuanle/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/whuanle/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/whuanle/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=98Fvfd6UZH20B_MF08daNaODjSu879MVR9RHmyvWAlg"></script>
    <script>
        var currentBlogId = 406195;
        var currentBlogApp = 'whuanle';
        var cb_enable_mathjax = true;
        var isLogined = false;
        var skinName = 'CodingLife';
    </script>
    <script type="text/x-mathjax-config">
        MathJax.Hub.Config({
        tex2jax: { inlineMath: [['$','$'], ['\\(','\\)']], processClass: 'math', processEscapes: true },
        TeX: {
        equationNumbers: { autoNumber: ['AMS'], useLabelIds: true },
        extensions: ['extpfeil.js', 'mediawiki-texvc.js'],
        Macros: {bm: "\\boldsymbol"}
        },
        'HTML-CSS': { linebreaks: { automatic: true } },
        SVG: { linebreaks: { automatic: true } }
        });
    </script>
    <script src="https://mathjax.cnblogs.com/2_7_5/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
    
</head>
<body>
    <a name="top"></a>
    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/whuanle/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/whuanle/">痴者工良</a>
</h1>
<h2>
一个逗B的大学生，爱好技术交流，目前专注于.NET 全栈开发
</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/whuanle/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E7%97%B4%E8%80%85%E5%B7%A5%E8%89%AF">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/whuanle/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
140&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
186</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/whuanle/p/12797269.html">C#多线程(14)：任务基础②</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
    <p><div class="toc"><div class="toc-container-header">目录</div><ul><li><a href="#判断任务状态">判断任务状态</a></li><li><a href="#再说父子任务">再说父子任务</a></li><li><a href="#组合任务延续任务">组合任务/延续任务</a></li><li><a href="#复杂的延续任务">复杂的延续任务</a></li><li><a href="#并行异步处理任务">并行(异步)处理任务</a></li><li><a href="#并行同步处理任务">并行(同步)处理任务</a></li><li><a href="#并行任务的-taskwhenany">并行任务的 Task.WhenAny</a></li><li><a href="#并行任务状态">并行任务状态</a></li><li><a href="#循环中值变化问题">循环中值变化问题</a></li><li><a href="#定时任务-taskscheduler-类">定时任务 TaskScheduler 类</a></li></ul></div></p>
<p>上一篇，我们学习了任务的基础，学会多种方式场景任务和执行，异步获取返回结果等。上一篇讲述的知识比较多，这一篇只要是代码实践和示例操作。</p>
<h3 id="判断任务状态">判断任务状态</h3>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>IsCanceled</td>
<td>获取此 Task 实例是否由于被取消的原因而已完成执行。</td>
</tr>
<tr>
<td>IsCompleted</td>
<td>获取一个值，它表示是否已完成任务。</td>
</tr>
<tr>
<td>IsCompletedSuccessfully</td>
<td>了解任务是否运行到完成。</td>
</tr>
<tr>
<td>IsFaulted</td>
<td>获取 Task是否由于未经处理异常的原因而完成。</td>
</tr>
<tr>
<td>Status</td>
<td>获取此任务的 TaskStatus。</td>
</tr>
</tbody>
</table>
<p>要检测一个任务是否出错(指任务因未经处理的异常而导致工作终止)，要使用 <code>IsCanceled</code> 和 <code>IsFaulted</code> 两个属性，只要任务抛出异常，<code>IsFaulted</code> 为 true。但是取消任务本质是抛出 <code>OperationCancelExcetion</code> 异常，不代表任务出错。</p>
<p>即使任务抛出了未经处理的异常，也算是完成了任务，因此 <code>IsCompleted</code> 属性，会为 true。</p>
<p>示例如下：</p>
<p>代码有点多，不易观察，请复制到程序中运行。</p>
<pre><code class="language-csharp">    class Program
    {
        static void Main()
        {
            // 正常任务
            Task task1 = new Task(() =&gt;
            {
            });
            task1.Start();
            Thread.Sleep(TimeSpan.FromSeconds(1));
            GetResult(task1.IsCanceled, task1.IsFaulted);
            Console.WriteLine(&quot;任务是否完成：&quot; + task1.IsCompleted);
            Console.WriteLine(&quot;-------------------&quot;);
            
            // 异常任务
            Task task2 = new Task(() =&gt;
            {
                throw new Exception();
            });
            task2.Start();
            Thread.Sleep(TimeSpan.FromSeconds(1));
            GetResult(task2.IsCanceled, task2.IsFaulted);
            Console.WriteLine(&quot;任务是否完成：&quot; + task2.IsCompleted);
            Console.WriteLine(&quot;-------------------&quot;);
            Thread.Sleep(TimeSpan.FromSeconds(1));

            CancellationTokenSource cts = new CancellationTokenSource();
            // 取消任务
            Task task3 = new Task(() =&gt;
            {
                Thread.Sleep(TimeSpan.FromSeconds(3));
            }, cts.Token);
            task3.Start();
            cts.Cancel();
            Thread.Sleep(TimeSpan.FromSeconds(1));
            GetResult(task3.IsCanceled, task3.IsFaulted);
            Console.WriteLine(&quot;任务是否完成：&quot; + task3.IsCompleted);
            Console.ReadKey();
        }

        public static void GetResult(bool isCancel, bool isFault)
        {
            if (isCancel == false &amp;&amp; isFault == false)
                Console.WriteLine(&quot;没有异常发生&quot;);
            else if (isCancel == true)
                Console.WriteLine(&quot;任务被取消&quot;);
            else
                Console.WriteLine(&quot;任务引发了未经处理的异常&quot;);
        }
    }
</code></pre>
<h3 id="再说父子任务">再说父子任务</h3>
<p>在上一篇文章中<a href="https://www.cnblogs.com/whuanle/p/12792639.html#%E7%88%B6%E5%AD%90%E4%BB%BB%E5%8A%A1">《C#多线程(13)：任务基础①》</a>，我们学习了父子任务，父任务需要等待子任务完成后才算完成任务。</p>
<p>上一章只是给出示例，没有明确说明场景和实验结果，这里重新写一个示例来补充。</p>
<p>非父子任务：</p>
<p>外层任务不会等待内嵌的任务完成，直接完成或返回结果。</p>
<pre><code class="language-csharp">        static void Main()
        {
            //两个任务没有从属关系，是独立的
            Task&lt;int&gt; task = new Task&lt;int&gt;(() =&gt;
            {
                // 非子任务
                Task task1 = new Task(() =&gt;
                {
                    Thread.Sleep(TimeSpan.FromSeconds(1));
                    for (int i = 0; i &lt; 5; i++)
                    {
                        Console.WriteLine(&quot;     内层任务1&quot;);
                        Thread.Sleep(TimeSpan.FromSeconds(0.5));
                    }
                });
                task1.Start();
                return 666;
            });
            task.Start();
            Console.WriteLine($&quot;任务运算结果是：{task.Result}&quot;);
            Console.WriteLine(&quot;\n-------------------\n&quot;);
            Console.ReadKey();
            }
</code></pre>
<p>父子任务：</p>
<p>父任务等待子任务完成后，才能算完成任务，然后返回结果。</p>
<pre><code class="language-csharp">        static void Main()
        {
            // 父子任务
            Task&lt;int&gt; task = new Task&lt;int&gt;(() =&gt;
            {
                // 子任务
                Task task1 = new Task(() =&gt;
                {
                    Thread.Sleep(TimeSpan.FromSeconds(1));
                    for (int i = 0; i &lt; 5; i++)
                    {
                        Console.WriteLine(&quot;     内层任务1&quot;);
                        Thread.Sleep(TimeSpan.FromSeconds(0.5));
                    }
                }, TaskCreationOptions.AttachedToParent);
                task1.Start();

                Console.WriteLine(&quot;最外层任务&quot;);
                return 666;
            });

            task.Start();
            Console.WriteLine($&quot;任务运算结果是：{task.Result}&quot;);
            Console.WriteLine(&quot;\n-------------------\n&quot;);

            Console.ReadKey();
        }
</code></pre>
<h3 id="组合任务延续任务">组合任务/延续任务</h3>
<p><code>Task.ContinueWith()</code> 方法创建一个在 任务(Task)实例 完成时异步执行的延续任务。</p>
<p><code>Task.ContinueWith()</code> 的重载方法非常多，可以参考：<a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.threading.tasks.task.continuewith?view=netcore-3.1#--">https://docs.microsoft.com/zh-cn/dotnet/api/system.threading.tasks.task.continuewith?view=netcore-3.1#--</a></p>
<p>这里我们使用的构造函数定义如下：</p>
<pre><code class="language-csharp">public Task ContinueWith(Action&lt;Task&gt; continuationAction);
</code></pre>
<p>一个简单的示例：</p>
<pre><code class="language-csharp">            Task task = new Task(() =&gt;
            {
                Console.WriteLine(&quot;     第一个任务&quot;);
                Thread.Sleep(TimeSpan.FromSeconds(2));
            });

            // 接下来第二个任务
            task.ContinueWith(t =&gt;
            {
                Console.WriteLine($&quot;     第二个任务}&quot;);
                Thread.Sleep(TimeSpan.FromSeconds(2));
            });
            task.Start();
</code></pre>
<p><img src="https://img2020.cnblogs.com/blog/1315495/202004/1315495-20200428210757181-1467556006.png" alt=""></p>
<p>一个任务(Task) 是可以设置多个延续任务的，这些任务是并行的，例如：</p>
<pre><code class="language-csharp">        static void Main()
        {
            Task task = new Task(() =&gt;
            {
                Console.WriteLine(&quot;     第一个任务&quot;);
                Thread.Sleep(TimeSpan.FromSeconds(1));
            });

            // 任务①
            task.ContinueWith(t =&gt;
            {
                for (int i = 0; i &lt; 5; i++)
                {
                    Console.WriteLine($&quot;    任务① &quot;);
                    Thread.Sleep(TimeSpan.FromSeconds(1));
                }
            });

            // 任务②
            task.ContinueWith(t =&gt;
            {
                for (int i = 0; i &lt; 5; i++)
                {
                    Console.WriteLine($&quot;     任务②&quot;);
                    Thread.Sleep(TimeSpan.FromSeconds(1));
                }
            });

            // 任务① 和 任务② 属于同级并行任务

            task.Start();
            }
</code></pre>
<p><img src="https://img2020.cnblogs.com/blog/1315495/202004/1315495-20200428210831833-2136622649.png" alt=""></p>
<p>通过多次实现延续/组合任务，会实现强有力的任务流程。</p>
<h3 id="复杂的延续任务">复杂的延续任务</h3>
<p>经过上一小节，我们学习了 <code>ContinueWith()</code> 来延续任务，现在我们来学习更多的重载方法，实现更加复杂的延续。</p>
<p><code>ContinueWith()</code> 重载方法很多，它们的参数都含有下面几种参数之一或多个。</p>
<ul>
<li>
<p>continuationAction</p>
<p>类型：Action 或 Func</p>
</li>
</ul>
<p>一个要执行的任务。</p>
<ul>
<li>
<p>state</p>
<p>类型：Object</p>
</li>
</ul>
<p>给延续任务传递的参数。</p>
<ul>
<li>
<p>cancellationToken</p>
<p>类型：CancellationToken</p>
</li>
</ul>
<p>取消标记。</p>
<ul>
<li>
<p>continuationOptions</p>
<p>类型：TaskContinuationOptions</p>
</li>
</ul>
<p>控制延续任务的创建和特性。</p>
<ul>
<li>
<p>scheduler</p>
<p>类型：TaskScheduler</p>
</li>
</ul>
<p>要与延续任务关联并用于其执行过程的 TaskScheduler。</p>
<p>前面四个参数(类型)，在以往的文章中已经出现过，这里就不再赘述；<code>TaskScheduler</code> 类型，这里先讲解，后面再说。</p>
<p>注意 <code>TaskCreationOptions</code> 和 <code>TaskContinuationOptions</code> 的区别，在前一篇我们学习过 <code>TaskCreationOptions</code>。这里来学习 <code>TaskContinuationOptions</code> 。</p>
<p><code>TaskContinuationOptions</code> 可以在以下重载上使用：</p>
<pre><code class="language-csharp">ContinueWith(Action, CancellationToken, TaskContinuationOptions, TaskScheduler)
</code></pre>
<pre><code class="language-csharp">ContinueWith(Action&gt;, TaskContinuationOptions
</code></pre>
<p>在延续中，这样使用是无效的：</p>
<pre><code class="language-csharp">            Task task = new Task(() =&gt;
            {
                Console.WriteLine(&quot;     第一个任务&quot;);
                Thread.Sleep(TimeSpan.FromSeconds(1));
            });
            task.ContinueWith(t =&gt;
            {
                for (int i = 0; i &lt; 5; i++)
                {
                    Console.WriteLine($&quot;    任务① &quot;);
                    Thread.Sleep(TimeSpan.FromSeconds(1));
                }
            },TaskContinuationOptions.AttachedToParent);
</code></pre>
<p>因为 <code>TaskContinuationOptions</code> 需要有嵌套关系的父子任务，才能生效。</p>
<p>正确使用方法：</p>
<pre><code class="language-csharp">        static void Main()
        {
            // 父子任务
            Task&lt;int&gt; task = new Task&lt;int&gt;(() =&gt;
            {
                // 子任务
                Task task1 = new Task(() =&gt;
                {
                    Thread.Sleep(TimeSpan.FromSeconds(1));
                    Console.WriteLine(&quot;     内层任务1&quot;);
                    Thread.Sleep(TimeSpan.FromSeconds(0.5));
                }, TaskCreationOptions.AttachedToParent);

                task1.ContinueWith(t =&gt;
                {
                    Thread.Sleep(TimeSpan.FromSeconds(1));
                    Console.WriteLine(&quot;内层延续任务，也属于子任务&quot;);
                    Thread.Sleep(TimeSpan.FromSeconds(0.5));
                }, TaskContinuationOptions.AttachedToParent);

                task1.Start();

                Console.WriteLine(&quot;最外层任务&quot;);
                return 666;
            });

            task.Start();
            Console.WriteLine($&quot;任务运算结果是：{task.Result}&quot;);
            Console.WriteLine(&quot;\n-------------------\n&quot;);

            Console.ReadKey();
        }
</code></pre>
<p><img src="https://www.whuanle.cn/wp-content/uploads/2020/04/image-1588071312510.png" alt="file"></p>
<h3 id="并行异步处理任务">并行(异步)处理任务</h3>
<p>这里我们来学习 <code>Task.WhenAll()</code> 方法的使用。</p>
<p><code>Task.WhenAll()</code> ：等待提供的所有 Task 对象完成执行过程</p>
<p>使用示例如下：</p>
<pre><code class="language-csharp">        static void Main()
        {
            List&lt;Task&gt; tasks = new List&lt;Task&gt;();

            for (int i = 0; i &lt; 5; i++)
                tasks.Add(Task.Run(() =&gt;
                {
                    Console.WriteLine($&quot;任务开始执行&quot;);
                }));

            // public static Task WhenAll(IEnumerable&lt;Task&gt; tasks);

            // 相当于多个任务，生成一个任务
            Task taskOne = Task.WhenAll(tasks);
            // 不需要等待的话就去除
            taskOne.Wait();

            Console.ReadKey();
        }
</code></pre>
<p><code> Task taskOne = Task.WhenAll(tasks);</code> 可以写成 <code> Task.WhenAll(tasks);</code>，返回的 Task 对象可以用来判断任务执行情况。</p>
<p>要注意，下面这样是无效的：</p>
<p>你可以修改上面的代码进行测试。</p>
<pre><code class="language-csharp">                tasks.Add(new Task(() =&gt;
                {
                    Console.WriteLine($&quot;任务开始执行&quot;);
                }));
</code></pre>
<p>我也不知道为啥 <code>new Task()</code> 不行。。。</p>
<p>如果任务有返回值，则可以使用下面这种方法</p>
<pre><code class="language-csharp">        static void Main()
        {
            List&lt;Task&lt;int&gt;&gt; tasks = new List&lt;Task&lt;int&gt;&gt;();

            for (int i = 0; i &lt; 5; i++)
                tasks.Add(Task.Run&lt;int&gt;(() =&gt;
                {
                    Console.WriteLine($&quot;任务开始执行&quot;);
                    return new Random().Next(0,10);
                }));

            Task&lt;int[]&gt; taskOne = Task.WhenAll(tasks);

            foreach (var item in taskOne.Result)
                Console.WriteLine(item);

            Console.ReadKey();
        }
</code></pre>
<h3 id="并行同步处理任务">并行(同步)处理任务</h3>
<p><code>Task.WaitAll()</code>：等待提供的所有 Task 对象完成执行过程。</p>
<p>我们来看看 <code>Task.WaitAll()</code> 其中一个重载方法的定义：</p>
<pre><code class="language-csharp">public static bool WaitAll (Task[] tasks, int millisecondsTimeout, CancellationToken cancellationToken);
</code></pre>
<ul>
<li>tasks	类型：Task[]</li>
</ul>
<p>要执行的所有任务。</p>
<ul>
<li>millisecondsTimeout	任务：Int32</li>
</ul>
<p>等待的毫秒数，-1 表示无限期等待。</p>
<ul>
<li>cancellationToken	类型：CancellationToken</li>
</ul>
<p>等待任务完成期间要观察的 CancellationToken。</p>
<p><code>Task.WaitAll()</code> 的示例如下：</p>
<pre><code class="language-csharp">        static void Main()
        {
            List&lt;Task&gt; tasks = new List&lt;Task&gt;();

            for (int i = 0; i &lt; 5; i++)
                tasks.Add(Task.Run(() =&gt;
                {
                    Console.WriteLine($&quot;任务开始执行&quot;);
                }));

            Task.WaitAll(tasks.ToArray());

            Console.ReadKey();
        }
</code></pre>
<p><code>Task.WaitAll()</code> 会让当前线程等待所有任务执行完毕。并且 <code>Task.WaitAll()</code> 是没有泛型的，也么没有返回结果。</p>
<h3 id="并行任务的-taskwhenany">并行任务的 Task.WhenAny</h3>
<p><code>Task.WhenAny()</code> 和 <code>Task.WhenAll()</code> 使用上差不多，<code>Task.WhenAll()</code> 当所有任务都完成时，才算完成，而 <code>Task.WhenAny()</code> 只要其中一个任务完成，都算完成。</p>
<p>这一点可以参考上面的 <strong>父子任务</strong>。</p>
<p>参考使用示例如下：</p>
<pre><code class="language-csharp">        static void Main()
        {
            List&lt;Task&gt; tasks = new List&lt;Task&gt;();

            for (int i = 0; i &lt; 5; i++)
                tasks.Add(Task.Run(() =&gt;
                {
                    Thread.Sleep(TimeSpan.FromSeconds(new Random().Next(0, 5)));
                    Console.WriteLine(&quot;     正在执行任务&quot;);
                }));
            Task taskOne = Task.WhenAny(tasks);
            taskOne.Wait(); // 任意一个任务完成，就可以解除等待

            Console.WriteLine(&quot;有任务已经完成了&quot;);

            Console.ReadKey();
        }
</code></pre>
<p>当然，<code>Task.WhenAny()</code>  也有泛型方法，可以返回结果。</p>
<h3 id="并行任务状态">并行任务状态</h3>
<p><code>Task.Status</code> 属性可以获取任务的状态。其属性类型是一个 TaskStatus 枚举，其定义如下：</p>
<table>
<thead>
<tr>
<th>枚举</th>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Canceled</td>
<td>6</td>
<td>已经通过 CancellationToken 取消任务。</td>
</tr>
<tr>
<td>Created</td>
<td>0</td>
<td>该任务已初始化，但尚未被计划。</td>
</tr>
<tr>
<td>Faulted</td>
<td>7</td>
<td>由于未处理异常的原因而完成的任务。</td>
</tr>
<tr>
<td>RanToCompletion</td>
<td>5</td>
<td>已成功完成执行的任务。</td>
</tr>
<tr>
<td>Running</td>
<td>3</td>
<td>该任务正在运行，但尚未完成。</td>
</tr>
<tr>
<td>WaitingForActivation</td>
<td>1</td>
<td>该任务正在等待 .NET Framework 基础结构在内部将其激活并进行计划。</td>
</tr>
<tr>
<td>WaitingForChildrenToComplete</td>
<td>4</td>
<td>该任务已完成执行，正在隐式等待附加的子任务完成。</td>
</tr>
<tr>
<td>WaitingToRun</td>
<td>2</td>
<td>该任务已被计划执行，但尚未开始执行。</td>
</tr>
</tbody>
</table>
<p>在使用并行任务时，<code>Task.Status</code>  的值，有一定规律：</p>
<ul>
<li>
<p>如果有其中一个任务出现未经处理的异常，那么返回<code>TaskStatus.Faulted</code>；</p>
</li>
<li>
<p>如果所有任务都出现未经处理的异常，会返回 <code>TaskStatus. RanToCompletion </code>；</p>
</li>
<li>
<p>如果其中一个任务被取消(即使出现未经处理的异常)，会返回 <code>TaskStaus.Canceled</code>；</p>
</li>
</ul>
<h3 id="循环中值变化问题">循环中值变化问题</h3>
<p>请运行测试下面两个示例：</p>
<pre><code class="language-csharp">        static void Main()
        {
            for (int i = 0; i &lt; 5; i++)
                new Thread(() =&gt;
                {
                    Console.WriteLine($&quot;i = {i}&quot;);
                }).Start();

            Console.ReadKey();
        }
</code></pre>
<pre><code class="language-csharp">        static void Main()
        {
            List&lt;Task&gt; tasks = new List&lt;Task&gt;();

            for (int i = 0; i &lt; 5; i++)
                tasks.Add(Task.Run(() =&gt;
                {
                    Console.WriteLine($&quot;i = {i}&quot;);
                }));
            Task taskOne = Task.WhenAll(tasks);
            taskOne.Wait();

            Console.ReadKey();
        }
</code></pre>
<p>你会发现，两个示例的结果并不是 <code>1,2,3,4,5</code>，而是 <code>5,5,5,5,5</code>。</p>
<p>这个问题称为 Race condition(竞争条件)，可以参考维基百科：</p>
<p><a href="https://en.wikipedia.org/wiki/Race_condition">https://en.wikipedia.org/wiki/Race_condition</a></p>
<p>微软文档里面也有关于此问题的说明，请参考：</p>
<p><a href="https://docs.microsoft.com/zh-cn/archive/blogs/ericlippert/closing-over-the-loop-variable-considered-harmful">https://docs.microsoft.com/zh-cn/archive/blogs/ericlippert/closing-over-the-loop-variable-considered-harmful</a></p>
<p>由于 i 在整个生命周期，内存都是在同一个位置，每个线程或任务对其值得使用，都是指向相同位置的。</p>
<p>这样就行了：</p>
<pre><code class="language-csharp">        static void Main()
        {
            for (int i = 0; i &lt; 5; i++)
            {
                int tmp = i;
                new Thread(() =&gt;
                {
                    Console.WriteLine($&quot;i = {tmp}&quot;);
                }).Start();
            }

            Console.ReadKey();
        }
</code></pre>
<p>这样是无效的：</p>
<pre><code class="language-csharp">            for (int i = 0; i &lt; 5; i++)
                new Thread(() =&gt;
                {
                    int tmp = i;
                    Console.WriteLine($&quot;i = {tmp}&quot;);
                }).Start();
</code></pre>
<h3 id="定时任务-taskscheduler-类">定时任务 TaskScheduler 类</h3>
<p>TaskScheduler 类：表示一个处理将任务排队到线程中的低级工作的对象。</p>
<p>网上大多数示例是 Wpf 、<code>WinForm</code>的，微软文档也是很复杂的样子： <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.threading.tasks.taskscheduler?view=netcore-3.1#properties">https://docs.microsoft.com/zh-cn/dotnet/api/system.threading.tasks.taskscheduler?view=netcore-3.1#properties</a></p>
<p>貌似 TaskScheduler 主要对 <code>SynchronizationContext</code> 进行控制，也就是说是对 UI 起作用。</p>
<p>笔者不写 WPF 和 WinForm ，所以，这个东西，跳过。哈哈哈哈。</p>

</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2020-04-28 21:09</span>&nbsp;
<a href="https://www.cnblogs.com/whuanle/">痴者工良</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12797269" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12797269);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 406195, cb_blogApp = 'whuanle', cb_blogUserGuid = 'b8263b87-b86b-4861-1de2-08d54dbac325';
    var cb_entryId = 12797269, cb_entryCreatedDate = '2020-04-28 21:09', cb_postType = 1; 
    loadViewCount(cb_entryId);
    loadSideColumnAd();
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

<div id="sidebar_ad"></div>
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 痴者工良
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>